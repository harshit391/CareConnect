// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  email        String?       @unique
  name         String
  password     String
  phone        String        @unique
  role         UserRole      @default(PATIENT)
  currLocation Json          @default("{}")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]
  ratings      Ratings[]
}

model Hospital {
  id                   String                                @id @default(cuid())
  email                String                                @unique
  name                 String
  password             String
  parentId             String?
  location             Unsupported("geometry(Point, 4326)")?
  parent               Hospital?                             @relation("HospitalSelfRelation", fields: [parentId], references: [id])
  children             Hospital[]                            @relation("HospitalSelfRelation")
  specialities         Speciality[]                          @relation("HospitalSpecialities")
  hospitalSpecialities HospitalSpeciality[]
  phone                String                                @unique
  documents            Document[]
  currLocation         Json                                  @default("{}")
  createdAt            DateTime                              @default(now())
  updatedAt            DateTime                              @updatedAt
  timings              Json?
  appointments         Appointment[]
  approved             Boolean                               @default(false)
  freeSlotDate         DateTime?
  maxAppointments      Int?                                  @default(10)
  emergency            Boolean                               @default(false)
  ratings              Ratings[]
  fees                 Int
}

model Document {
  id         String         @id @default(cuid())
  hospitalId String
  name       String
  url        String
  status     DocumentStatus @default(PENDING)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  Hospital   Hospital       @relation(fields: [hospitalId], references: [id])
}

enum DocumentStatus {
  PENDING
  APPROVED
  REJECTED
}

model Speciality {
  id                   String               @id @default(cuid())
  name                 String
  description          String
  tags                 Json[]               @default([])
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  hospitalSpecialities HospitalSpeciality[]
  hospitals            Hospital[]           @relation("HospitalSpecialities")
  Ratings              Ratings[]
}

model HospitalSpeciality {
  hospitalId   String
  specialityId String
  hospital     Hospital   @relation(fields: [hospitalId], references: [id])
  speciality   Speciality @relation(fields: [specialityId], references: [id])

  @@id([hospitalId, specialityId])
}

enum UserRole {
  PATIENT
  ADMIN
}

model Appointment {
  id            String   @id @default(cuid())
  hospitalId    String
  userId        String
  date          DateTime
  status        String   @default("PENDING")
  paidPrice     Int
  doctorCharges Int      @default(0)
  paidCharges   Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Hospital      Hospital @relation(fields: [hospitalId], references: [id])
  User          User     @relation(fields: [userId], references: [id])
  ratingsId     String?
  bankDetails   Json?
}

model Ratings {
  id           String  @id @default(cuid())
  hospitalId   String
  userId       String
  rating       Int
  feedback     String?
  specialityId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Hospital   Hospital   @relation(fields: [hospitalId], references: [id])
  User       User       @relation(fields: [userId], references: [id])
  Speciality Speciality @relation(fields: [specialityId], references: [id])

  @@unique([hospitalId, userId, specialityId], name: "unique_hospital_user_speciality_rating")
}

model Feedback {
  id        String   @id @default(cuid())
  name      String
  phone     String
  email     String
  message   String
  createdAt DateTime @default(now())
}
